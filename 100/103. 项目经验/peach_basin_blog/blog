# blog-Java

## 泛型

<img src="./image-20231121145453651.png" alt="image-20231121145453651" style="zoom:67%;" />



## ==全局异常处理==

> 将报错 变成 指定格式的输出 (如Result)

![image-20231121143724616](./image-20231121143724616.png)





## ==JWT==



### 简介

![image-20231121145317260](./image-20231121145317260.png)

依赖导入 && JWT生成

![image-20231121145854947](./image-20231121145854947.png)

JWT验证

![image-20231121150336414](./image-20231121150336414.png)



### 工具类![image-20231121150759902](./image-20231121150759902.png)

```java
package czp.login.util;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;

import java.util.Date;
import java.util.Map;

public class JWTUtil {

    private static final String SECRET_KEY = "czp";

    public static String getToken(Map<String, Object> claims) {
        return JWT.create()
                .withClaim("claims", claims)
                .withExpiresAt(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 12))
                .sign(Algorithm.HMAC256(SECRET_KEY));
    }

    public static Map<String, Object> parseToken(String token) {
        return JWT.require(Algorithm.HMAC256(SECRET_KEY))
                .build()
                .verify(token)
                .getClaim("claims")
                .asMap();
    }
}
```



### 生成并返回JWT

>  登录页面

![image-20231121151215927](./image-20231121151215927.png)



### 获取JWT并校验

> (可以用`实战2`来替换)

![image-20231121151413637](./image-20231121151413637.png)



### 实现拦截器

![image-20231121153136748](./image-20231121153136748.png)

```java
package czp.login.interceptor;

import czp.login.util.JWTUtil;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Map;

@Component
public class LoginInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String token = request.getHeader("Authorization");
        try {
            Map<String, Object> map = JWTUtil.parseToken(token);
            return true;
        }
        catch (Exception e) {
            response.setStatus(401);
            return false;
        }
    }
}
```



### 注册拦截器

![image-20231121153251435](./image-20231121153251435.png)

```java
package czp.login.config;

import czp.login.interceptor.LoginInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Autowired
    private LoginInterceptor loginInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(loginInterceptor).excludePathPatterns("/user/signUp", "/user/signIn");
    }
}
```



## ThreadLocal

> 可以配合JWT使用: 
>
> 通过登录接口获取JWT令牌, 之后的请求的请求头中包含JWT, 拦截器捕获到JWT并将其中的`id`、`name`等信息存入ThreadLocal;
>
> 在其他请求中, 可以获取ThreadLocal中的相关信息, <u>从而知晓当前登录的用户</u>

```java
package czp.login.util;

public class ThreadLocalUtil {
    public static final ThreadLocal THREAD_LOCAL = new ThreadLocal();

    public static void set(Object data) {
        THREAD_LOCAL.set(data);
    }

    public static <T> T get() {
        return (T) THREAD_LOCAL.get();
    }

    public static void remove() {
        THREAD_LOCAL.remove();
    }
}
```



## 动态SQL

文件位置

<img src="./image-20231122112255202.png" alt="image-20231122112255202" style="zoom:67%;" />



接口

<img src="./image-20231122112333464.png" alt="image-20231122112333464" style="zoom:67%;" />



xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="czp.login.mapper.UserMapper">
    <update id="updateUser">
        update user
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="pwd != null">
                pwd = #{pwd},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime},
            </if>
        </set>
        where id = #{id}
    </update>
</mapper>
```



## 参数校验

![image-20231127163935183](./image-20231127163935183.png)



![image-20231122155534227](./image-20231122155534227.png)

![image-20231122155228220](./image-20231122155228220.png)

​	

## postman全局Authorization

![image-20231125164653397](./image-20231125164653397.png)

<img src="./image-20231127093038188.png" alt="image-20231127093038188" style="zoom: 90%;" />



## 自定义校验

![image-20231128151512261](./image-20231128151512261.png)

**![image-20231128151849635](./image-20231128151849635.png)**

注解的定义

```java
package czp.login.annotation;

import czp.login.validation.StateValidation;

import javax.validation.Constraint;
import javax.validation.Payload;
import java.lang.annotation.*;

@Documented
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = StateValidation.class)
public @interface State {
    String message() default "文章的状态只能是'已发布'或'草稿'";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}
```

校验数据的业务实现类

```java
package czp.login.validation;

import czp.login.annotation.State;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

public class StateValidation implements ConstraintValidator<State, String> {

    @Override
    public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {
        if(value == null) return false;
        if(value.equals("已发布") || value.equals("草稿")) return true;
        return false;
    }
}
```

*使用自定义校验注解的实体类

```java
package czp.login.entity.mybatis;

import czp.login.annotation.State;
import czp.login.entity.validated.INSERT;
import czp.login.entity.validated.UPDATE;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.validator.constraints.URL;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Article {

    @NotNull(groups = UPDATE.class)
    Integer id; // auto_generated

    @NotEmpty(groups = {INSERT.class, UPDATE.class})
    @Pattern(regexp = "^\\S{1,20}$", groups = {INSERT.class, UPDATE.class})
    String title;

    @NotEmpty(groups = {INSERT.class, UPDATE.class})
    String content;

    @URL(groups = {INSERT.class, UPDATE.class})
    String coverUrl;  // set default

    @NotNull(groups = {INSERT.class, UPDATE.class})
    @State(groups = {INSERT.class, UPDATE.class})
    String state;

    Integer categoryId;  // null

    Integer userId;  // ThreadUtils.getUserId()
    String createTime;  // TimeUtil.now()  default current_timestamp
    String updateTime;  // TimeUtil.now()
}
```



## 分页条件查询

### 响应格式

> 需要定义符合返回格式的对象`PageResult(total, items)`

![image-20231128161516543](./image-20231128161516543.png)



### 大体思路

> 需要用到分页插件`PageHelper`

![image-20231128161830928](./image-20231128161830928.png)



### PageHelper及其应用

![image-20231128162458977](./image-20231128162458977.png)

```xml
<dependency>
        <groupId>com.github.pagehelper</groupId>
        <artifactId>pagehelper-spring-boot-starter</artifactId>
         <version>1.4.6</version>
</dependency>
```



![image-20231128165548063](./image-20231128165548063.png)

<img src="./image-20231128165938609.png" alt="image-20231128165938609" style="zoom:67%;" />



## 文件上传

### 本地保存

> 前端![image-20231130151216895](./image-20231130151216895.png)

>  后端<img src="./image-20231130151232611.png" alt="image-20231130151232611" style="zoom:80%;" />
>
> <img src="./image-20231130152528861.png" alt="image-20231130152528861" style="zoom: 80%;" />
>
> `file.transferTo(new File("想要把file保存到本地的具体位置的路径和文件名"));`



### 阿里云oss简介

> 1. **创建阿里云bucket**: 登录阿里云, 点击右上角`控制台`, 点击左上角, 点击`对象存储oss`, 点击`创建bucket`, 输入`bucketname`并选择`公共读`, 点击`确认创建`
> 1. **创建并保存AccessKey**: 点击右上角的头像, 点击`AccessKey管理`, 创建AccessKey并保存其csv文件
> 1. **参照官网文档在项目中导入依赖**: 
>     1. 打开oss
>     1. 点击SDK并选择Java![image-20231130155916038](./image-20231130155916038.png)
>     1. ![image-20231130160108975](./image-20231130160108975.png)

 接下来我们可以根据文档内容对项目进行开发<img src="./image-20231130161745169.png" alt="image-20231130161745169" style="zoom: 67%;" />



### 文件上传工具类

```java
package czp.login.util;

import com.aliyun.oss.ClientException;
import com.aliyun.oss.OSS;
import com.aliyun.oss.OSSClientBuilder;
import com.aliyun.oss.OSSException;
import com.aliyun.oss.model.PutObjectRequest;
import com.aliyun.oss.model.PutObjectResult;
import java.io.File;
import java.io.InputStream;

public class AliOssUtil {

    public static final String ENDPOINT = "oss-cn-beijing.aliyuncs.com";
    public static final String BUCKETNAME = "peach-basin-blog";
    public static final String ACCESS_KEY_ID = "LTAI5tMnQLUnhn3CRfrYrdjW";
    public static final String ACCESS_KEY_SECRET = "NQtqSFlHtRECU8Oic6LSzEV79HPLkI";

    public static String uploadFile(String objectName, InputStream inputStream) throws Exception {
        OSS ossClient = new OSSClientBuilder()
                .build("https://"+ENDPOINT, ACCESS_KEY_ID, ACCESS_KEY_SECRET);
        String url = "";

        try {
        
            PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKETNAME, objectName, inputStream);
            PutObjectResult result = ossClient.putObject(putObjectRequest);
            url = "https://" + BUCKETNAME + "." + ENDPOINT + "/" + objectName;
            
        } catch (OSSException oe) {
            System.out.println("Caught an OSSException, which means your request made it to OSS, "
                    + "but was rejected with an error response for some reason.");
            System.out.println("Error Message:" + oe.getErrorMessage());
            System.out.println("Error Code:" + oe.getErrorCode());
            System.out.println("Request ID:" + oe.getRequestId());
            System.out.println("Host ID:" + oe.getHostId());
        } catch (ClientException ce) {
            System.out.println("Caught an ClientException, which means the client encountered "
                    + "a serious internal problem while trying to communicate with OSS, "
                    + "such as not being able to access the network.");
            System.out.println("Error Message:" + ce.getMessage());
        } finally {
            if (ossClient != null) {
                ossClient.shutdown();
            }
        }

        return url;

    }
}
```



### 应用

```java
package czp.login.controller;

import czp.login.entity.Result;
import czp.login.util.AliOssUtil;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import java.util.UUID;

@RestController
public class FileController {

    @PostMapping("/upload")
    public Result<String> uploadFile(MultipartFile file) throws Exception {
        String oldFilename = file.getOriginalFilename();  // 注意函数别调用错了
        String suffix = oldFilename.substring(oldFilename.lastIndexOf("."));
        String newFileName = UUID.randomUUID() + suffix;
        String s = AliOssUtil.uploadFile(newFileName, file.getInputStream());
        return Result.success(s);
    }

}

```



## 令牌主动失效

![image-20231130185249153](./image-20231130185249153.png)





## SpringBoot项目部署

### 简单流程

![image-20231201120459088](./image-20231201120459088.png)

1. 安装插件

![image-20231201120637725](./image-20231201120637725.png)

2. package

![image-20231201121201111](./image-20231201121201111.png)

打包成功后在`target`目录下找对应的Jar包

<img src="./image-20231201121336641.png" alt="image-20231201121336641" style="zoom:67%;" />

3. 运行

    在本地打开Jar包的目录, 用cmd命令执行`java -jar 文件名`

<img src="./image-20231201121621790.png" alt="image-20231201121621790"  />



总结

<img src="./image-20231201121840875.png" alt="image-20231201121840875" style="zoom:80%;" />



### 更改属性的方式

**命令行**

> 执行`java -jar xx`命令时指定属性

<img src="./image-20231201163417703.png" alt="image-20231201163417703" style="zoom:80%;" />



**环境变量**

<img src="./image-20231201163601806.png" alt="image-20231201163601806" style="zoom:80%;" />



**外部配置文件**

> 同目录下 **application.yml**

![image-20231201164042845](./image-20231201164042845.png)



**配置方法的优先级**

<img src="./image-20231201164340586.png" alt="image-20231201164340586" style="zoom:50%;" />



## 多环境

<img src="./image-20231201170830643.png" alt="image-20231201170830643" style="zoom:67%;" />



### 单文件

![image-20231201165758536](./image-20231201165758536.png)

<img src="./image-20231201170432833.png" alt="image-20231201170432833" style="zoom:67%;" />

![image-20231201170556292](./image-20231201170556292.png)



### 多文件

<img src="./image-20231201170705414.png" alt="image-20231201170705414" style="zoom:67%;" />

![image-20231201170806875](./image-20231201170806875.png)



### 分组

> 将同一环境的文件根据功能分成多个文件, 
>
> 文件命名方式 和 环境生效方式 如下图

<img src="./image-20231201171523564.png" alt="image-20231201171523564" style="zoom:80%;" />

![image-20231201171902723](./image-20231201171902723.png)





# blog-Vue3



## js导入

![image-20231201180425793](./image-20231201180425793.png)

>  <img src="./image-20231201180956619.png" alt="image-20231201180956619" style="zoom:50%;" />
>
> 起别名
>
> ![image-20231201181606725](./image-20231201181606725.png)
>
> 默认导出
>
> ![image-20231201181922192](./image-20231201181922192.png)



## ==Axios==

> 可以在前端向后端发送请求, 完成前后端的连接

<img src="./image-20231201182257671.png" alt="image-20231201182257671" style="zoom: 67%;" />

![image-20231201182430684](./image-20231201182430684.png)

> 接受请求的后端控制层需要加上注解`@CrossOrigin`
>
> ![image-20231201182949147](./image-20231201182949147.png)
>
> <img src="./image-20231201183507866.png" alt="image-20231201183507866" style="zoom:67%;" />

![image-20231201184226143](./image-20231201184226143.png)


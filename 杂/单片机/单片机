# 定时器

## 整体流程 *(以TMOD=0x01为例)*

<img src="./image-20231103105416113.png" alt="image-20231103105416113" style="zoom:67%;" />

## 1. 报备

**TMOD=0x01**

<img src="./image-20231103104111077.png" alt="image-20231103104111077" style="zoom:50%;" />

<img src="./image-20231103104411666.png" alt="image-20231103104411666" style="zoom:40%;" />

## 2. 初值

**TH0=(65536-us)/256;**

**TL0=(65536-us)%256**

> 定时器有16位, 默认初值为零, 每隔1us自增, 达到最大值 *(TMOD=0x01时, 该最大值为65536us=65.536ms)* 后溢出, 我们可通过改变初值 的方式来按照我们想要的时间定时

<img src="./image-20231103103826909.png" alt="image-20231103103826909" style="zoom:50%;" />

## 3. 启动

**TR0=1**

<img src="./image-20231103104604904.png" alt="image-20231103104604904" style="zoom: 50%;" />

## 4. 等待

**while(TF0==0);**

> 当定时结束, 中断请求标志位TF0会自动置1

## 5. 重置初值和TF0

**TH0=(65536-us)/256;**

**TL0=(65536-us)%256**

**TF0=0**



​	



# 中断

## 中断一览

![image-20231103104255301](./image-20231103104255301.png)





## 中断允许寄存器

<img src="./image-20231103104218720.png" alt="image-20231103104218720" style="zoom:50%;" />

<img src="./image-20231103104206579.png" alt="image-20231103104206579" style="zoom:50%;" />





# 外部中断

>  外部中断有两种触发方式: **低电平触发**和**下降沿触发**
>
> 其中, 下降沿触发 可以降低操作重复执行的情况, 还可以自动清除中断请求标志
>
> 设置IT0=1即可



<img src="./image-20231103114933055.png" alt="image-20231103114933055" style="zoom:67%;" />







# 应用

## 延时函数

![image-20231103115357779](./image-20231103115357779.png)



## 定时器中断流水

![image-20231103111101025](./image-20231103111101025.png)



## 定时器中断流水+外部中断启停

![image-20231103123006203](./image-20231103123006203.png)